---
// Switches listing page with filters and orbital comparison
import BaseLayout from '../layouts/BaseLayout.astro';
import OrbitalComparison from '../components/OrbitalComparison.astro';

// Sample switch data - in a real app, this would come from your content collections
const allSwitches = [
  {
    id: 'cherry-mx-blue',
    name: 'Cherry MX Blue',
    slug: 'cherry-mx-blue',
    type: 'Clicky',
    manufacturer: 'Cherry',
    actuationForce: '50g',
    bottomOutForce: '60g',
    rating: 8.5,
    price: '$0.35',
    image: '/images/cherry-mx-blue-card.jpg',
    description: 'The definitive clicky switch that started it all.',
    tags: ['classic', 'loud', 'tactile'],
    color: '#4F46E5',
    inStock: true,
    popularity: 95
  },
  {
    id: 'gateron-oil-kings',
    name: 'Gateron Oil Kings',
    slug: 'gateron-oil-kings',
    type: 'Linear',
    manufacturer: 'Gateron',
    actuationForce: '45g',
    bottomOutForce: '60g',
    rating: 9.2,
    price: '$0.65',
    image: '/images/gateron-oil-kings-card.jpg',
    description: 'Deep-sounding linear switch with a premium feel.',
    tags: ['thocky', 'smooth', 'premium'],
    color: '#059669',
    inStock: true,
    popularity: 88
  },
  {
    id: 'holy-panda',
    name: 'Holy Panda',
    slug: 'holy-panda',
    type: 'Tactile',
    manufacturer: 'Various',
    actuationForce: '67g',
    bottomOutForce: '67g',
    rating: 9.0,
    price: '$1.20',
    image: '/images/holy-panda-card.jpg',
    description: 'The most hyped tactile switch ever.',
    tags: ['legendary', 'expensive', 'tactile'],
    color: '#DC2626',
    inStock: false,
    popularity: 92
  },
  {
    id: 'alpaca-v2',
    name: 'Alpaca V2',
    slug: 'alpaca-v2',
    type: 'Linear',
    manufacturer: 'Durock',
    actuationForce: '62g',
    bottomOutForce: '62g',
    rating: 8.8,
    price: '$0.85',
    image: '/images/alpaca-v2-card.jpg',
    description: 'The updated version of the beloved linear switch.',
    tags: ['smooth', 'updated', 'popular'],
    color: '#7C3AED',
    inStock: true,
    popularity: 85
  },
  {
    id: 'zealios-v2',
    name: 'Zealios V2',
    slug: 'zealios-v2',
    type: 'Tactile',
    manufacturer: 'ZealPC',
    actuationForce: '65g',
    bottomOutForce: '65g',
    rating: 8.7,
    price: '$1.10',
    image: '/images/zealios-v2-card.jpg',
    description: 'Premium tactile switches with customizable weight options.',
    tags: ['premium', 'customizable', 'smooth'],
    color: '#EA580C',
    inStock: true,
    popularity: 78
  },
  {
    id: 'tealios-v2',
    name: 'Tealios V2',
    slug: 'tealios-v2',
    type: 'Linear',
    manufacturer: 'ZealPC',
    actuationForce: '67g',
    bottomOutForce: '67g',
    rating: 8.6,
    price: '$1.15',
    image: '/images/tealios-v2-card.jpg',
    description: 'The smoothest linear switch in Zeal\'s lineup.',
    tags: ['smooth', 'premium', 'heavy'],
    color: '#0891B2',
    inStock: true,
    popularity: 82
  },
  {
    id: 'kailh-box-jade',
    name: 'Kailh Box Jade',
    slug: 'kailh-box-jade',
    type: 'Clicky',
    manufacturer: 'Kailh',
    actuationForce: '50g',
    bottomOutForce: '60g',
    rating: 8.3,
    price: '$0.45',
    image: '/images/kailh-box-jade-card.jpg',
    description: 'Click-bar mechanism with unique sound profile.',
    tags: ['click-bar', 'unique', 'budget'],
    color: '#10B981',
    inStock: true,
    popularity: 75
  },
  {
    id: 'gateron-yellow',
    name: 'Gateron Yellow',
    slug: 'gateron-yellow',
    type: 'Linear',
    manufacturer: 'Gateron',
    actuationForce: '50g',
    bottomOutForce: '60g',
    rating: 8.1,
    price: '$0.25',
    image: '/images/gateron-yellow-card.jpg',
    description: 'Budget-friendly linear with surprising smoothness.',
    tags: ['budget', 'smooth', 'popular'],
    color: '#F59E0B',
    inStock: true,
    popularity: 90
  }
];

const manufacturers = [...new Set(allSwitches.map(s => s.manufacturer))];
const switchTypes = [...new Set(allSwitches.map(s => s.type))];
---

<BaseLayout 
  title="Switch Database - Thockverse"
  description="Explore our comprehensive database of mechanical keyboard switches with detailed specifications, ratings, and comparisons."
  posts={[]}
>
  <div class="space-y-8">
    <!-- Page Header -->
    <div class="text-center space-y-4">
      <h1 class="text-4xl lg:text-5xl font-bold text-gradient">Switch Database</h1>
      <p class="text-xl text-muted-foreground max-w-3xl mx-auto">
        Explore our comprehensive database of mechanical keyboard switches. Compare specifications, read reviews, and find your perfect switch.
      </p>
    </div>

    <!-- Filters and Search -->
    <div class="glass-dark rounded-2xl p-6 space-y-6">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
          </svg>
          <h2 class="text-lg font-semibold text-foreground">Filters</h2>
          <span id="result-count" class="text-sm text-muted-foreground">(8 switches)</span>
        </div>
        
        <button 
          id="clear-filters"
          class="px-4 py-2 text-sm bg-red-500/20 text-red-300 border border-red-500/30 rounded-lg hover:bg-red-500/30 transition-colors duration-200"
        >
          Clear Filters
        </button>
      </div>

      <!-- Filter Controls -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <!-- Search -->
        <div class="space-y-2">
          <label class="text-sm font-medium text-muted-foreground">Search</label>
          <input 
            id="search-input"
            type="text" 
            placeholder="Search switches..."
            class="w-full px-3 py-2 rounded-lg bg-input border border-border text-foreground placeholder-muted-foreground focus-space"
          />
        </div>

        <!-- Type Filter -->
        <div class="space-y-2">
          <label class="text-sm font-medium text-muted-foreground">Type</label>
          <select 
            id="type-filter"
            class="w-full px-3 py-2 rounded-lg bg-input border border-border text-foreground focus-space"
          >
            <option value="">All Types</option>
            {switchTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>

        <!-- Manufacturer Filter -->
        <div class="space-y-2">
          <label class="text-sm font-medium text-muted-foreground">Manufacturer</label>
          <select 
            id="manufacturer-filter"
            class="w-full px-3 py-2 rounded-lg bg-input border border-border text-foreground focus-space"
          >
            <option value="">All Manufacturers</option>
            {manufacturers.map(manufacturer => (
              <option key={manufacturer} value={manufacturer}>{manufacturer}</option>
            ))}
          </select>
        </div>

        <!-- Stock Filter -->
        <div class="space-y-2">
          <label class="text-sm font-medium text-muted-foreground">Availability</label>
          <div class="flex items-center space-x-4">
            <label class="flex items-center space-x-2">
              <input 
                id="in-stock-only" 
                type="checkbox" 
                class="w-4 h-4 text-primary-500 bg-input border-border rounded focus:ring-primary-500"
              />
              <span class="text-sm text-muted-foreground">In Stock Only</span>
            </label>
          </div>
        </div>
      </div>

      <!-- Sort Options -->
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 pt-4 border-t border-white/10">
        <div class="flex items-center space-x-4">
          <span class="text-sm font-medium text-muted-foreground">Sort by:</span>
          <select 
            id="sort-select"
            class="px-3 py-2 rounded-lg bg-input border border-border text-foreground focus-space"
          >
            <option value="popularity">Popularity</option>
            <option value="rating">Rating</option>
            <option value="name">Name</option>
            <option value="price">Price</option>
            <option value="force">Actuation Force</option>
          </select>
        </div>

        <!-- View Toggle -->
        <div class="flex items-center space-x-2">
          <span class="text-sm text-muted-foreground">View:</span>
          <div class="flex bg-input rounded-lg p-1">
            <button 
              id="grid-view" 
              class="px-3 py-1 rounded text-sm font-medium bg-primary-500 text-white"
            >
              Grid
            </button>
            <button 
              id="list-view" 
              class="px-3 py-1 rounded text-sm font-medium text-muted-foreground hover:text-foreground"
            >
              List
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Orbital Comparison Tool -->
    <OrbitalComparison switches={allSwitches} />

    <!-- Switches Grid -->
    <div class="space-y-6">
      <div class="flex items-center justify-between">
        <h2 class="text-2xl font-bold text-gradient">All Switches</h2>
        <button 
          id="toggle-comparison"
          class="px-4 py-2 bg-primary-500/20 text-primary-300 border border-primary-500/30 rounded-lg hover:bg-primary-500/30 transition-colors duration-200"
        >
          Show Comparison Tool
        </button>
      </div>

      <div id="switches-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {allSwitches.map((switchItem, index) => (
          <article 
            key={switchItem.id}
            class="switch-item switch-card group cursor-pointer float-animation"
            style={`animation-delay: ${index * 0.05}s`}
            data-search-terms={`${switchItem.name.toLowerCase()} ${switchItem.manufacturer.toLowerCase()} ${switchItem.type.toLowerCase()} ${switchItem.tags.join(' ')}`}
            data-type={switchItem.type}
            data-manufacturer={switchItem.manufacturer}
            data-in-stock={switchItem.inStock}
            data-rating={switchItem.rating}
            data-price={parseFloat(switchItem.price.replace('$', ''))}
            data-force={parseFloat(switchItem.actuationForce.replace('g', ''))}
            data-popularity={switchItem.popularity}
          >
            <!-- Switch Image -->
            <div class="aspect-video bg-gradient-to-br from-primary-500/20 to-accent-500/20 rounded-lg mb-4 overflow-hidden relative">
              {switchItem.image ? (
                <img 
                  src={switchItem.image}
                  alt={switchItem.name}
                  class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                  loading="lazy"
                />
              ) : (
                <div class="w-full h-full flex items-center justify-center">
                  <div 
                    class="w-16 h-10 rounded shadow-lg"
                    style={`background: linear-gradient(135deg, ${switchItem.color}80, ${switchItem.color})`}
                  ></div>
                </div>
              )}
              
              <!-- Stock Status -->
              <div class={`absolute top-2 right-2 px-2 py-1 rounded-full text-xs font-medium ${switchItem.inStock ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}`}>
                {switchItem.inStock ? 'In Stock' : 'Out of Stock'}
              </div>
            </div>

            <!-- Switch Info -->
            <div class="space-y-3">
              <!-- Header -->
              <div class="flex items-start justify-between">
                <div class="flex-1 min-w-0">
                  <h3 class="font-bold text-foreground group-hover:text-primary-400 transition-colors duration-200 line-clamp-2">
                    {switchItem.name}
                  </h3>
                  <p class="text-sm text-muted-foreground mt-1">{switchItem.manufacturer}</p>
                </div>
                <div class="flex items-center space-x-1 ml-2">
                  <svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                  </svg>
                  <span class="font-semibold text-yellow-400 text-xs">{switchItem.rating}</span>
                </div>
              </div>

              <!-- Description -->
              <p class="text-sm text-muted-foreground line-clamp-2">
                {switchItem.description}
              </p>

              <!-- Specs -->
              <div class="grid grid-cols-2 gap-2 text-xs">
                <div class="bg-input/30 rounded px-2 py-1">
                  <span class="text-muted-foreground">Type:</span>
                  <span class="text-foreground ml-1 font-medium">{switchItem.type}</span>
                </div>
                <div class="bg-input/30 rounded px-2 py-1">
                  <span class="text-muted-foreground">Force:</span>
                  <span class="text-foreground ml-1 font-medium">{switchItem.actuationForce}</span>
                </div>
              </div>

              <!-- Tags -->
              <div class="flex flex-wrap gap-1">
                {switchItem.tags.slice(0, 3).map(tag => (
                  <span key={tag} class="px-2 py-1 text-2xs font-medium bg-primary-500/20 text-primary-300 rounded-full">
                    {tag}
                  </span>
                ))}
              </div>

              <!-- Price and CTA -->
              <div class="flex items-center justify-between pt-2 border-t border-border/20">
                <span class="font-bold text-accent-400">{switchItem.price}</span>
                <button 
                  class="px-3 py-1 text-xs bg-primary-500/20 text-primary-300 border border-primary-500/30 rounded hover:bg-primary-500/30 transition-colors duration-200"
                >
                  View Review
                </button>
              </div>
            </div>

            <!-- Hidden link for accessibility -->
            <a href={`/posts/${switchItem.slug}`} class="absolute inset-0 z-10" aria-label={`Read ${switchItem.name} review`}>
              <span class="sr-only">Read {switchItem.name} review</span>
            </a>
          </article>
        ))}
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-12">
        <div class="text-6xl mb-4">🔍</div>
        <h3 class="text-xl font-semibold text-foreground mb-2">No switches found</h3>
        <p class="text-muted-foreground">Try adjusting your filters or search terms</p>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Switch filtering and search functionality
  class SwitchDatabase {
    constructor() {
      this.switches = Array.from(document.querySelectorAll('.switch-item'));
      this.searchInput = document.getElementById('search-input');
      this.typeFilter = document.getElementById('type-filter');
      this.manufacturerFilter = document.getElementById('manufacturer-filter');
      this.inStockOnly = document.getElementById('in-stock-only');
      this.sortSelect = document.getElementById('sort-select');
      this.clearButton = document.getElementById('clear-filters');
      this.resultCount = document.getElementById('result-count');
      this.noResults = document.getElementById('no-results');
      this.gridView = document.getElementById('grid-view');
      this.listView = document.getElementById('list-view');
      this.switchesGrid = document.getElementById('switches-grid');
      this.toggleComparison = document.getElementById('toggle-comparison');
      this.orbitalComparison = document.getElementById('orbital-comparison');
      
      this.init();
    }
    
    init() {
      this.attachEventListeners();
      this.updateResultCount();
    }
    
    attachEventListeners() {
      this.searchInput?.addEventListener('input', this.handleFilter.bind(this));
      this.typeFilter?.addEventListener('change', this.handleFilter.bind(this));
      this.manufacturerFilter?.addEventListener('change', this.handleFilter.bind(this));
      this.inStockOnly?.addEventListener('change', this.handleFilter.bind(this));
      this.sortSelect?.addEventListener('change', this.handleSort.bind(this));
      this.clearButton?.addEventListener('click', this.clearFilters.bind(this));
      
      this.gridView?.addEventListener('click', this.setGridView.bind(this));
      this.listView?.addEventListener('click', this.setListView.bind(this));
      
      this.toggleComparison?.addEventListener('click', this.toggleComparisonTool.bind(this));
    }
    
    handleFilter() {
      const searchTerm = this.searchInput?.value.toLowerCase() || '';
      const selectedType = this.typeFilter?.value || '';
      const selectedManufacturer = this.manufacturerFilter?.value || '';
      const inStockFilter = this.inStockOnly?.checked || false;
      
      let visibleCount = 0;
      
      this.switches.forEach(switchEl => {
        const searchTerms = switchEl.dataset.searchTerms || '';
        const type = switchEl.dataset.type || '';
        const manufacturer = switchEl.dataset.manufacturer || '';
        const inStock = switchEl.dataset.inStock === 'true';
        
        const matchesSearch = !searchTerm || searchTerms.includes(searchTerm);
        const matchesType = !selectedType || type === selectedType;
        const matchesManufacturer = !selectedManufacturer || manufacturer === selectedManufacturer;
        const matchesStock = !inStockFilter || inStock;
        
        const isVisible = matchesSearch && matchesType && matchesManufacturer && matchesStock;
        
        if (isVisible) {
          switchEl.style.display = 'block';
          switchEl.classList.remove('hidden');
          visibleCount++;
        } else {
          switchEl.style.display = 'none';
          switchEl.classList.add('hidden');
        }
      });
      
      this.updateResultCount(visibleCount);
      this.showNoResults(visibleCount === 0);
    }
    
    handleSort() {
      const sortBy = this.sortSelect?.value || 'popularity';
      const switchesArray = Array.from(this.switches);
      
      switchesArray.sort((a, b) => {
        let aValue, bValue;
        
        switch (sortBy) {
          case 'rating':
            aValue = parseFloat(a.dataset.rating);
            bValue = parseFloat(b.dataset.rating);
            return bValue - aValue; // Descending
          case 'name':
            aValue = a.querySelector('h3').textContent;
            bValue = b.querySelector('h3').textContent;
            return aValue.localeCompare(bValue); // Ascending
          case 'price':
            aValue = parseFloat(a.dataset.price);
            bValue = parseFloat(b.dataset.price);
            return aValue - bValue; // Ascending
          case 'force':
            aValue = parseFloat(a.dataset.force);
            bValue = parseFloat(b.dataset.force);
            return aValue - bValue; // Ascending
          case 'popularity':
          default:
            aValue = parseFloat(a.dataset.popularity);
            bValue = parseFloat(b.dataset.popularity);
            return bValue - aValue; // Descending
        }
      });
      
      // Re-append elements in sorted order
      switchesArray.forEach(switchEl => {
        this.switchesGrid?.appendChild(switchEl);
      });
    }
    
    clearFilters() {
      if (this.searchInput) this.searchInput.value = '';
      if (this.typeFilter) this.typeFilter.value = '';
      if (this.manufacturerFilter) this.manufacturerFilter.value = '';
      if (this.inStockOnly) this.inStockOnly.checked = false;
      if (this.sortSelect) this.sortSelect.value = 'popularity';
      
      this.handleFilter();
      this.handleSort();
    }
    
    updateResultCount(count) {
      const total = count !== undefined ? count : this.switches.filter(s => !s.classList.contains('hidden')).length;
      if (this.resultCount) {
        this.resultCount.textContent = `(${total} switch${total !== 1 ? 'es' : ''})`;
      }
    }
    
    showNoResults(show) {
      if (this.noResults) {
        this.noResults.style.display = show ? 'block' : 'none';
      }
    }
    
    setGridView() {
      this.gridView?.classList.add('bg-primary-500', 'text-white');
      this.gridView?.classList.remove('text-muted-foreground');
      this.listView?.classList.remove('bg-primary-500', 'text-white');
      this.listView?.classList.add('text-muted-foreground');
      
      this.switchesGrid?.classList.remove('space-y-4');
      this.switchesGrid?.classList.add('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'xl:grid-cols-4', 'gap-6');
    }
    
    setListView() {
      this.listView?.classList.add('bg-primary-500', 'text-white');
      this.listView?.classList.remove('text-muted-foreground');
      this.gridView?.classList.remove('bg-primary-500', 'text-white');
      this.gridView?.classList.add('text-muted-foreground');
      
      this.switchesGrid?.classList.remove('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'xl:grid-cols-4', 'gap-6');
      this.switchesGrid?.classList.add('space-y-4');
    }
    
    toggleComparisonTool() {
      if (this.orbitalComparison) {
        const isHidden = this.orbitalComparison.style.display === 'none';
        this.orbitalComparison.style.display = isHidden ? 'block' : 'none';
        if (this.toggleComparison) {
          this.toggleComparison.textContent = isHidden ? 'Hide Comparison Tool' : 'Show Comparison Tool';
        }
        
        if (!isHidden) {
          // Smooth scroll to comparison tool
          this.orbitalComparison.scrollIntoView({ behavior: 'smooth' });
        }
      }
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SwitchDatabase();
  });
</script>

<style>
  /* Enhanced grid animations */
  .switch-item {
    transition: all 0.3s ease;
  }
  
  .switch-item.hidden {
    opacity: 0;
    transform: scale(0.95);
  }
  
  /* Improved focus styles */
  select:focus,
  input:focus {
    ring-width: 2px;
    ring-color: rgba(58, 155, 220, 0.5);
  }
  
  /* Custom checkbox styles */
  input[type="checkbox"]:checked {
    background-color: #3A9BDC;
    border-color: #3A9BDC;
  }
</style>