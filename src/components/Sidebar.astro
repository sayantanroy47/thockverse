---
// Sidebar.astro - Collapsible sidebar with widgets
interface Props {
  posts?: any[];
  popularSwitches?: any[];
}

const { posts = [], popularSwitches = [] } = Astro.props;

// Sample data for now - will be replaced with real data
const latestPosts = posts.length > 0 ? posts.slice(0, 5) : [
  {
    title: "Cherry MX Blue Review: The Clicky Typing Icon",
    slug: "cherry-mx-blue",
    date: "2025-08-07",
    image: "/images/cherry-mx-blue-thumb.jpg"
  },
  {
    title: "Gateron Oil Kings: The Deep Thock Experience",
    slug: "gateron-oil-kings", 
    date: "2025-08-06",
    image: "/images/gateron-oil-kings-thumb.jpg"
  },
  {
    title: "Holy Panda: The Legendary Tactile Switch",
    slug: "holy-panda",
    date: "2025-08-05",
    image: "/images/holy-panda-thumb.jpg"
  }
];

const topSwitches = popularSwitches.length > 0 ? popularSwitches.slice(0, 6) : [
  {
    name: "Gateron Oil Kings",
    slug: "gateron-oil-kings",
    score: 9.2,
    type: "Linear",
    image: "/images/gateron-oil-kings-icon.jpg"
  },
  {
    name: "Holy Panda",
    slug: "holy-panda", 
    score: 9.0,
    type: "Tactile",
    image: "/images/holy-panda-icon.jpg"
  },
  {
    name: "Cherry MX Blue",
    slug: "cherry-mx-blue",
    score: 8.5,
    type: "Clicky",
    image: "/images/cherry-mx-blue-icon.jpg"
  },
  {
    name: "Alpaca V2",
    slug: "alpaca-v2",
    score: 8.8,
    type: "Linear", 
    image: "/images/alpaca-v2-icon.jpg"
  },
  {
    name: "Zealios V2",
    slug: "zealios-v2",
    score: 8.7,
    type: "Tactile",
    image: "/images/zealios-v2-icon.jpg"
  },
  {
    name: "Tealios V2",
    slug: "tealios-v2",
    score: 8.6,
    type: "Linear",
    image: "/images/tealios-v2-icon.jpg"
  }
];

const categories = [
  { name: "Linear Switches", icon: "üìè", count: 12, color: "text-blue-400" },
  { name: "Tactile Switches", icon: "‚ö°", count: 8, color: "text-purple-400" },
  { name: "Clicky Switches", icon: "üîä", count: 6, color: "text-green-400" },
  { name: "Keyboards", icon: "‚å®Ô∏è", count: 4, color: "text-yellow-400" },
  { name: "Keycaps", icon: "üéØ", count: 3, color: "text-pink-400" },
  { name: "Tutorials", icon: "üìö", count: 7, color: "text-cyan-400" }
];
---

<aside class="w-80 glass-dark p-6 space-y-6 h-full force-no-scroll overflow-hidden" id="sidebar">
  <!-- Sidebar Toggle (Mobile) -->
  <button 
    id="sidebar-toggle"
    class="lg:hidden absolute -right-12 top-4 p-2 rounded-r-lg glass-dark hover:bg-white/20 transition-colors duration-200"
    aria-label="Toggle sidebar"
  >
    <svg class="w-5 h-5 transform rotate-0" id="sidebar-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>

  <!-- Latest Posts Widget -->
  <div class="space-y-4">
    <div class="flex items-center space-x-2 hover-reveal-trigger">
      <div class="w-2 h-2 neon-blue rounded-full stellar-glow"></div>
      <h3 class="text-lg font-semibold text-accent">Latest Posts</h3>
    </div>
    
    <div class="space-y-3 infinite-scroll-container force-no-scroll overflow-hidden" data-type="posts">
      {latestPosts.map((post, index) => (
        <a 
          href={`/posts/${post.slug}`}
          class="flex space-x-3 p-3 rounded-lg hover:bg-white/5 transition-all duration-200 group hover-lift"
        >
          <!-- Post thumbnail -->
          <div class="flex-shrink-0 w-12 h-12 rounded-lg bg-card border border-border flex items-center justify-center overflow-hidden">
            {post.image ? (
              <img 
                src={post.image} 
                alt={post.title}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            ) : (
              <div class="w-6 h-6 bg-primary/60 rounded"></div>
            )}
          </div>
          
          <div class="flex-1 min-w-0">
            <h4 class="text-sm font-medium text-foreground group-hover:text-primary transition-colors duration-200 line-clamp-2">
              {post.title}
            </h4>
            <p class="text-xs text-muted-foreground mt-1">
              {new Date(post.date).toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric' 
              })}
            </p>
          </div>
        </a>
      ))}
    </div>
    
    <a 
      href="/posts"
      class="inline-flex items-center text-sm text-primary-400 hover:text-primary-300 transition-colors duration-200"
    >
      View all posts
      <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </a>
  </div>

  <!-- Popular Switches Widget -->
  <div class="space-y-4">
    <div class="flex items-center space-x-2 hover-reveal-trigger">
      <div class="w-2 h-2 neon-pink rounded-full stellar-glow"></div>
      <h3 class="text-lg font-semibold text-accent">
        Popular Switches
      </h3>
    </div>
    
    <div class="space-y-2 infinite-scroll-container force-no-scroll overflow-hidden" data-type="switches">
      {topSwitches.map((switchItem, index) => (
        <a 
          href={`/switches/${switchItem.slug}`}
          class="flex items-center space-x-3 p-3 rounded-lg hover:bg-white/5 transition-all duration-200 group hover-lift"
        >
          <!-- Rank number -->
          <div class="flex-shrink-0 w-6 h-6 rounded-full bg-primary flex items-center justify-center text-xs font-bold text-primary-foreground">
            {index + 1}
          </div>
          
          <!-- Switch icon -->
          <div class="flex-shrink-0 w-8 h-8 rounded bg-muted flex items-center justify-center overflow-hidden">
            {switchItem.image ? (
              <img 
                src={switchItem.image} 
                alt={switchItem.name}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            ) : (
              <div class="w-4 h-3 bg-primary/60 rounded-sm"></div>
            )}
          </div>
          
          <div class="flex-1 min-w-0">
            <div class="flex items-center justify-between">
              <h4 class="text-sm font-medium text-foreground group-hover:text-primary transition-colors duration-200 truncate">
                {switchItem.name}
              </h4>
              <span class="text-xs font-bold text-accent stellar-glow">
                {switchItem.score}
              </span>
            </div>
            <p class="text-xs text-muted-foreground">
              {switchItem.type}
            </p>
          </div>
        </a>
      ))}
    </div>
    
    <a 
      href="/switches"
      class="inline-flex items-center text-sm text-accent-400 hover:text-accent-300 transition-colors duration-200"
    >
      View all switches
      <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </a>
  </div>

  <!-- Categories Navigation -->
  <div class="space-y-4">
    <div class="flex items-center space-x-2 hover-reveal-trigger">
      <div class="w-2 h-2 neon-green rounded-full stellar-glow"></div>
      <h3 class="text-lg font-semibold text-foreground">Categories</h3>
    </div>
    
    <nav class="space-y-2">
      {categories.map((category) => (
        <a 
          href={`/category/${category.name.toLowerCase().replace(' ', '-')}`}
          class="flex items-center justify-between p-2 rounded-lg hover:bg-white/5 transition-all duration-200 group hover-lift"
        >
          <div class="flex items-center space-x-3">
            <span class="text-lg">{category.icon}</span>
            <span class="text-sm font-medium text-foreground group-hover:text-primary transition-colors duration-200">
              {category.name}
            </span>
          </div>
          <span class={`text-xs font-bold ${category.color} px-2 py-1 rounded-full bg-white/10`}>
            {category.count}
          </span>
        </a>
      ))}
    </nav>
  </div>

  <!-- Newsletter Signup -->
  <div class="spec-glow rounded-lg p-4 space-y-3">
    <div class="flex items-center space-x-2">
      <span class="text-lg">üöÄ</span>
      <h3 class="text-sm font-semibold text-foreground">Stay Updated</h3>
    </div>
    <p class="text-xs text-muted-foreground">
      Get the latest switch reviews and keyboard news delivered to your inbox.
    </p>
    <div class="flex space-x-2">
      <input 
        type="email" 
        placeholder="Enter your email"
        class="flex-1 px-3 py-2 text-xs rounded bg-input border border-border text-foreground placeholder-muted-foreground focus-space"
      >
      <button class="px-3 py-2 text-xs font-medium bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-all duration-200">
        Join
      </button>
    </div>
  </div>
</aside>

<script>
  // Sidebar toggle functionality for mobile
  const sidebar = document.getElementById('sidebar');
  const sidebarToggle = document.getElementById('sidebar-toggle');
  const sidebarArrow = document.getElementById('sidebar-arrow');
  let sidebarOpen = true;

  function toggleSidebar() {
    sidebarOpen = !sidebarOpen;
    
    if (sidebarOpen) {
      sidebar?.classList.remove('-translate-x-full');
      sidebarArrow?.classList.remove('rotate-180');
    } else {
      sidebar?.classList.add('-translate-x-full');
      sidebarArrow?.classList.add('rotate-180');
    }
  }

  sidebarToggle?.addEventListener('click', toggleSidebar);

  // Auto-hide sidebar on mobile for better UX
  function handleResize() {
    if (window.innerWidth < 1024) {
      sidebar?.classList.add('-translate-x-full');
      sidebarOpen = false;
      sidebarArrow?.classList.add('rotate-180');
    } else {
      sidebar?.classList.remove('-translate-x-full');
      sidebarOpen = true;
      sidebarArrow?.classList.remove('rotate-180');
    }
  }

  // Initialize on page load
  handleResize();
  window.addEventListener('resize', handleResize);

  // Epic neon hover effects
  document.querySelectorAll('.hover-reveal-trigger').forEach(trigger => {
    trigger.addEventListener('mouseenter', () => {
      const reveal = trigger.querySelector('.hover-reveal');
      reveal?.classList.add('active');
    });
    
    trigger.addEventListener('mouseleave', () => {
      const reveal = trigger.querySelector('.hover-reveal');
      reveal?.classList.remove('active');
    });
  });

  // Glitch effect on hover
  document.querySelectorAll('.glitch-on-hover').forEach(element => {
    element.addEventListener('mouseenter', () => {
      element.classList.add('glitch');
      setTimeout(() => element.classList.remove('glitch'), 300);
    });
  });

  // Infinite scroll simulation (for future enhancement)
  class InfiniteScroll {
    constructor(container) {
      this.container = container;
      this.type = container.dataset.type;
      this.isLoading = false;
      this.observeLastItem();
    }

    observeLastItem() {
      const lastItem = this.container.lastElementChild;
      if (!lastItem) return;

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !this.isLoading) {
            this.loadMore();
          }
        });
      }, { threshold: 0.1 });

      observer.observe(lastItem);
    }

    async loadMore() {
      if (this.isLoading) return;
      this.isLoading = true;

      // Create loading indicator
      const loading = document.createElement('div');
      loading.className = 'flex justify-center py-4';
      loading.innerHTML = '<div class="neon-cyan neon-glow text-xs">Loading more...</div>';
      this.container.appendChild(loading);

      // Simulate loading delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Remove loading indicator
      loading.remove();
      this.isLoading = false;

      // In real implementation, this would fetch more data
      console.log(`Loading more ${this.type}...`);
    }
  }

  // Initialize infinite scroll for containers
  document.querySelectorAll('.infinite-scroll-container').forEach(container => {
    new InfiniteScroll(container);
  });

  // Enhanced newsletter signup with neon effects
  const newsletterForm = sidebar?.querySelector('input[type="email"]')?.parentElement;
  const newsletterButton = newsletterForm?.querySelector('button');
  const newsletterInput = newsletterForm?.querySelector('input');

  newsletterButton?.addEventListener('click', () => {
    const email = newsletterInput?.value;
    if (email && email.includes('@')) {
      newsletterButton.textContent = 'Joined!';
      newsletterButton.classList.add('neon-green', 'neon-glow');
      newsletterButton.style.background = 'rgba(57, 255, 20, 0.2)';
      
      setTimeout(() => {
        newsletterButton.textContent = 'Join';
        newsletterButton.classList.remove('neon-green', 'neon-glow');
        newsletterButton.style.background = '';
      }, 2000);
    }
  });

  // Add particle trails to interactive elements
  function createParticleTrail(event) {
    const particle = document.createElement('div');
    particle.style.cssText = `
      position: fixed;
      left: ${event.clientX}px;
      top: ${event.clientY}px;
      width: 4px;
      height: 4px;
      background: rgb(0, 255, 255);
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      animation: particle-fade 0.5s ease-out forwards;
    `;
    
    document.body.appendChild(particle);
    setTimeout(() => particle.remove(), 500);
  }

  // Add particle trails to neon elements
  sidebar?.addEventListener('mousemove', (e) => {
    if (Math.random() < 0.1) { // Only create particles sometimes
      createParticleTrail(e);
    }
  });
</script>

<style>
  /* Enhanced sidebar animation */
  #sidebar {
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Glitch effect keyframes */
  @keyframes glitch-text {
    0% { transform: translateX(0); }
    10% { transform: translateX(-2px) skewX(1deg); }
    20% { transform: translateX(2px) skewX(-1deg); }
    30% { transform: translateX(-1px); }
    40% { transform: translateX(1px) skewX(0.5deg); }
    50% { transform: translateX(-0.5px); }
    60% { transform: translateX(0.5px) skewX(-0.5deg); }
    70% { transform: translateX(-0.25px); }
    80% { transform: translateX(0.25px); }
    90% { transform: translateX(-0.1px); }
    100% { transform: translateX(0); }
  }
  
  .glitch {
    animation: glitch-text 0.3s ease-in-out;
  }
  
  /* Particle trail animation */
  @keyframes particle-fade {
    0% {
      opacity: 1;
      transform: scale(1);
    }
    100% {
      opacity: 0;
      transform: scale(0) translateY(-20px);
    }
  }
  
  /* Enhanced hover effects */
  .group:hover .animate-pulse {
    animation-play-state: paused;
  }
  
  .group:hover .neon-glow {
    animation: neon-pulse 0.5s ease-in-out;
  }
  
  /* Neon border animation */
  .cyber-border {
    position: relative;
  }
  
  .cyber-border::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, 
      transparent 0%, 
      rgba(0, 255, 255, 0.3) 25%, 
      rgba(255, 20, 147, 0.3) 50%, 
      rgba(57, 255, 20, 0.3) 75%, 
      transparent 100%
    );
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }
  
  .cyber-border:hover::before {
    opacity: 1;
  }
  
  /* Mobile-specific styles */
  @media (max-width: 1023px) {
    #sidebar {
      position: fixed;
      top: 4rem;
      left: 0;
      z-index: 40;
      height: calc(100vh - 4rem);
      overflow: hidden !important;
      max-width: 320px;
    }
  }
  
  /* Custom neon text effects */
  .text-gradient {
    background: linear-gradient(45deg, rgb(0, 255, 255), rgb(255, 20, 147), rgb(57, 255, 20));
    background-size: 200% 200%;
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
    animation: gradient-shift 3s ease-in-out infinite;
  }
  
  @keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
</style>