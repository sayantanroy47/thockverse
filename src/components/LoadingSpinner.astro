---
// LoadingSpinner.astro - Space-themed loading spinner
interface Props {
  size?: 'sm' | 'md' | 'lg';
  text?: string;
}

const { size = 'md', text = 'Loading...' } = Astro.props;

const sizeClasses = {
  sm: 'w-6 h-6',
  md: 'w-12 h-12', 
  lg: 'w-16 h-16'
};

const textSizeClasses = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-lg'
};
---

<div class="loading-spinner flex flex-col items-center justify-center space-y-4">
  <!-- Orbital Loading Animation -->
  <div class={`relative ${sizeClasses[size]}`}>
    <!-- Central planet -->
    <div class="absolute inset-0 flex items-center justify-center">
      <div class="w-3 h-3 bg-gradient-to-br from-primary-500 to-accent-500 rounded-full shadow-lg"></div>
    </div>
    
    <!-- Orbiting particles -->
    <div class="orbit-container absolute inset-0">
      <div class="orbit-ring">
        <div class="orbit-particle w-1 h-1 bg-primary-400 rounded-full"></div>
      </div>
    </div>
    
    <div class="orbit-container absolute inset-0" style="animation-delay: -0.5s;">
      <div class="orbit-ring" style="animation-duration: 1.5s;">
        <div class="orbit-particle w-1 h-1 bg-accent-400 rounded-full"></div>
      </div>
    </div>
    
    <div class="orbit-container absolute inset-0" style="animation-delay: -1s;">
      <div class="orbit-ring" style="animation-duration: 2s;">
        <div class="orbit-particle w-1 h-1 bg-primary-300 rounded-full"></div>
      </div>
    </div>
  </div>
  
  <!-- Loading Text -->
  {text && (
    <div class={`${textSizeClasses[size]} text-space-gray-300 font-medium`}>
      <span class="loading-text">{text}</span>
    </div>
  )}
</div>

<style>
  .orbit-container {
    animation: orbit 2s linear infinite;
  }
  
  .orbit-ring {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    position: relative;
  }
  
  .orbit-particle {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    box-shadow: 0 0 4px currentColor;
  }
  
  @keyframes orbit {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  /* Loading text pulse animation */
  .loading-text {
    animation: pulse 1.5s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .loading-spinner {
      scale: 0.8;
    }
  }
</style>